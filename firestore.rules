rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection - users can read and write their own documents
    match /users/{userId} {
      // Users can read any user's public profile information
      allow read: if request.auth != null;
      
      // Users can only create and update their own profile
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(resource.data);
      
      // Users cannot delete their profile (admin only)
      allow delete: if request.auth != null 
        && isAdmin();
    }
    
    // Pint Sessions collection
    match /pintSessions/{sessionId} {
      // Anyone authenticated can read sessions
      allow read: if request.auth != null;
      
      // Any authenticated user can create a session
      allow create: if request.auth != null 
        && validateSessionData(request.resource.data)
        && request.resource.data.initiatorId == request.auth.uid;
      
      // Only the session creator can update or delete
      allow update, delete: if request.auth != null 
        && resource.data.initiatorId == request.auth.uid;
      
      // Chat messages subcollection
      match /messages/{messageId} {
        // Anyone in the session can read messages
        allow read: if request.auth != null;
        
        // Any authenticated user can create messages
        allow create: if request.auth != null 
          && request.resource.data.senderId == request.auth.uid;
        
        // Only the message sender can delete their messages
        allow delete: if request.auth != null 
          && resource.data.senderId == request.auth.uid;
        
        // Messages cannot be updated (immutable)
        allow update: if false;
      }
    }
    
    // Pubs collection
    match /pubs/{pubId} {
      // Anyone can read pub information
      allow read: if request.auth != null;
      
      // Only admins or pub owners can create/update pubs
      allow create, update: if request.auth != null 
        && (isAdmin() || isPubOwner());
      
      // Only admins can delete pubs
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      // Users can read friendships they're involved in
      allow read: if request.auth != null 
        && (resource.data.requesterId == request.auth.uid 
          || resource.data.addresseeId == request.auth.uid);
      
      // Users can create friend requests
      allow create: if request.auth != null 
        && request.resource.data.requesterId == request.auth.uid
        && validateFriendshipData(request.resource.data);
      
      // Users can update friendship status if they're the addressee
      allow update: if request.auth != null 
        && resource.data.addresseeId == request.auth.uid
        && onlyStatusChanged();
      
      // Users can delete friendships they're involved in
      allow delete: if request.auth != null 
        && (resource.data.requesterId == request.auth.uid 
          || resource.data.addresseeId == request.auth.uid);
    }
    
    // Achievements collection - read only for users, admin managed
    match /achievements/{achievementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Admin-only collections
    match /adminUsers/{adminId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    match /pubOwners/{ownerId} {
      allow read, write: if request.auth != null 
        && (isAdmin() || isPubOwner());
    }
    
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPubOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'pub_owner';
    }
    
    function validateUserData(data) {
      return data.keys().hasAll(['id', 'email', 'displayName', 'subscriptionTier', 'role'])
        && data.id == request.auth.uid
        && data.email == request.auth.token.email
        && data.subscriptionTier in ['free', 'plus']
        && data.role in ['user', 'pub_owner', 'admin'];
    }
    
    function validateSessionData(data) {
      return data.keys().hasAll(['pubName', 'eta', 'location', 'geohash', 'initiatorId', 'attendeeIds', 'isPrivate'])
        && data.initiatorId == request.auth.uid
        && data.attendeeIds is list
        && data.attendeeIds.size() > 0
        && data.attendeeIds[0] == request.auth.uid;
    }
    
    function validateFriendshipData(data) {
      return data.keys().hasAll(['requesterId', 'addresseeId', 'status'])
        && data.requesterId == request.auth.uid
        && data.status == 'pending'
        && data.requesterId != data.addresseeId;
    }
    
    function onlyStatusChanged() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
        && request.resource.data.status in ['accepted', 'declined'];
    }
  }
}